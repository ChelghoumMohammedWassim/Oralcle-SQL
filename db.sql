CREATE TABLE CLIENT(
    ID INTEGER NOT NULL,
    NAME VARCHAR(30) NOT NULL,
    PRIMARY KEY(ID)
);

CREATE TABLE ADRESSE(
    ID INTEGER NOT NULL,
    STREET VARCHAR(50) NOT NULL UNIQUE,
    ZIP_CODE INTEGER  NOT NULL,
    CLIENT_ID INTEGER NOT NULL,
    PRIMARY KEY(ID),
    FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(ID)
);

CREATE TABLE PHONE(
    NUM VARCHAR(11) NOT NULL,
    CLIENT_ID INTEGER NOT NULL,
    PRIMARY KEY(NUM),
    FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(ID)
);

CREATE TABLE ARTICLE(
    CODE INTEGER NOT NULL,
    PRICE FLOAT NOT NULL,
    TAXE FLOAT,
    SAMPLE INTEGER NOT NULL,
    PRIMARY KEY(CODE)
);

CREATE TABLE ORDERS(
    ID INTEGER NOT NULL,
    ORDER_DATE VARCHAR(255) NOT NULL,
    ADRESSE VARCHAR(50),
    CLIENT_ID INTEGER NOT NULL,
    PRIMARY KEY(ID),
    FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(ID)
);

CREATE TABLE CONCERNED(
    ID INTEGER NOT NULL,
    OREDER_ID INTEGER NOT NULL,
    ARTICLE_CODE INTEGER NOT NULL,
    PRIMARY KEY(ID),
    FOREIGN KEY (OREDER_ID) REFERENCES ORDERS(ID),
    FOREIGN KEY (ARTICLE_CODE) REFERENCES ARTICLE(CODE)
);
----------------------------------------------------------------------------
INSERT INTO CLIENT (ID, NAME )
VALUES (1, 'John Doe');

INSERT INTO CLIENT (ID, NAME)
VALUES (2, 'Jane Smith');

SELECT * FROM CLIENT;


INSERT INTO ADRESSE (ID, STREET, ZIP_CODE, CLIENT_ID)
VALUES (1, '123 Main St', 12345, 1);

INSERT INTO ADRESSE (ID, STREET, ZIP_CODE, CLIENT_ID)
VALUES (2, '456 Elm St', 67890, 2);

SELECT * FROM ADRESSE;


INSERT INTO PHONE (NUM, CLIENT_ID)
VALUES ('1234567890', 1);

INSERT INTO PHONE (NUM, CLIENT_ID)
VALUES ('9876543210', 2);

SELECT * FROM PHONE;


INSERT INTO ARTICLE (CODE, PRICE, TAXE, SAMPLE)
VALUES (1, 9.99, 0.5, 1);

INSERT INTO ARTICLE (CODE, PRICE, TAXE, SAMPLE)
VALUES (2, 19.99, 0.8, 1);

SELECT * FROM ARTICLE;


INSERT INTO ORDERS (ID, ORDER_DATE, ADRESSE, CLIENT_ID)
VALUES (1, '2023-05-01', '123 Main St', 1);

INSERT INTO ORDERS (ID, ORDER_DATE, ADRESSE, CLIENT_ID)
VALUES (2, '2023-05-10', '456 Elm St', 2);

SELECT * FROM ORDERS;


INSERT INTO CONCERNED (ID, OREDER_ID, ARTICLE_CODE)
VALUES (1, 1, 1);

INSERT INTO CONCERNED (ID, OREDER_ID, ARTICLE_CODE)
VALUES (2, 2, 2);

SELECT * FROM CONCERNED;
-------------------------------------------------------------------
--Q2--
SELECT c.ID, c.NAME, a.STREET, a.ZIP_CODE ,p.NUM
FROM CLIENT c
JOIN ADRESSE a ON c.ID = a.CLIENT_ID
JOIN PHONE p ON  c.ID = P.CLIENT_ID;

SELECT c.name,o.ORDER_DATE, o.ADRESSE
FROM ORDERS o
JOIN CLIENT c ON o.client_id= c.id;

SELECT COUNT(*) AS total_clients
FROM CLIENT;

SELECT AVG(PRICE) AS average_price
FROM ARTICLE;

SELECT o.ID, SUM(ar.PRICE + (ar.PRICE * ar.TAXE)) AS total
FROM ORDERS o
JOIN CONCERNED co ON o.ID = co.OREDER_ID
JOIN ARTICLE ar ON co.ARTICLE_CODE = ar.CODE
GROUP BY o.ID;

---------------------------------------------------------------------
--Q3--
CREATE OR REPLACE TRIGGER update_article
AFTER INSERT ON CONCERNED
FOR EACH ROW
BEGIN
    UPDATE ARTICLE
    SET SAMPLE = SAMPLE - 1
    WHERE CODE = :NEW.ARTICLE_CODE;
END;
/

SELECT * FROM ARTICLE;

INSERT INTO CONCERNED (ID, OREDER_ID, ARTICLE_CODE)
VALUES (3, 1, 1);

SELECT * FROM ARTICLE;
-----------------------------------------------------------------------
--Q4--
BEGIN
  BEGIN
    INSERT INTO PHONE (NUM, CLIENT_ID)
    VALUES ('1879543210', 2);

    INSERT INTO PHONE (NUM, CLIENT_ID)
    VALUES ('1879543210', 1);

    COMMIT;

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
  END;
END;

SELECT * FROM PHONE;
-----------------------------------------------------------------------
--Q5--
CREATE VIEW USER_INFO AS
SELECT c.ID, c.NAME, a.STREET, a.ZIP_CODE ,p.NUM
FROM CLIENT c
JOIN ADRESSE a ON c.ID = a.CLIENT_ID
JOIN PHONE p ON  c.ID = P.CLIENT_ID;

CREATE ROLE C##CLIENT;
GRANT SELECT, DELETE, INSERT, UPDATE ON USER_INFO TO C##CLIENT;
GRANT  INSERT ON ORDERS TO C##CLIENT;
GRANT SELECT ON ARTICLE TO C##CLIENT;

CREATE USER C##user IDENTIFIED BY wassim;
GRANT C##CLIENT TO C##user;
GRANT CREATE SESSION TO C##user;

SELECT * FROM system.USER_INFO;
----------------------------------------------------------------------
DROP USER C##user;
DROP ROLE C##CLIENT;
DROP VIEW USER_INFO;

DROP TABLE CONCERNED;
DROP TABLE ARTICLE;
DROP TABLE ORDERS;
DROP TABLE ADRESSE;
DROP TABLE PHONE;
DROP TABLE CLIENT;

DROP TRIGGER update_article;


-------------------------------------------------------------------
--Q6--
CREATE TYPE ADRESSE  AS OBJECT(
    ID INTEGER,
    STREET VARCHAR(50),
    ZIP_CODE INTEGER  
);

CREATE TYPE PHONE  AS OBJECT(
    ID INTEGER ,
    NUM VARCHAR(11)
);

CREATE TYPE listADR AS TABLE OF ADRESSE;
CREATE TYPE listPH AS TABLE OF PHONE;

CREATE TYPE CLIENT AS OBJECT(
    ID INTEGER,
    NAME VARCHAR(30),
    ADR listADR,
    PH  listPH
);

CREATE TYPE ARTICLE  AS OBJECT(
    CODE INTEGER,
    PRICE FLOAT,
    TAXE FLOAT,
    SAMPLE INTEGER,
    MEMBER FUNCTION calculateLineTotal RETURN FLOAT
);

CREATE TYPE inventory AS TABLE OF ARTICLE;

CREATE TABLE ORDERS(
    ID INTEGER NOT NULL,
    ORDER_DATE VARCHAR(255) NOT NULL,
    CL CLIENT,
    INV inventory,
    PRIMARY KEY(ID)
)NESTED TABLE INV STORE AS listinv,
 NESTED TABLE CL.ADR STORE AS CL_ADR_TAB,
 NESTED TABLE CL.PH STORE AS CL_PH_TAB;
 
-----------------------------------------------------------------------------
--Q7--
CREATE TYPE BODY ARTICLE AS 
    MEMBER FUNCTION calculateLineTotal RETURN FLOAT IS
    BEGIN
        RETURN PRICE + (PRICE * TAXE);
    END;
END;

-----------------------------------------------------------------------------
--Q8--
INSERT INTO ORDERS
VALUES (
    1,
    '20-05-2023',
    CLIENT(
        2,
        'John Doe',
        listADR(ADRESSE(1, '456 Elm St', 12345)),
        listPH(PHONE(6, '9876543210'))
    ),
    inventory(ARTICLE(2, 19.99, 0.5, 1))
);

INSERT INTO ORDERS
VALUES (
    2,
    '20-05-2023',
    CLIENT(
        2,
        'Jane Smith',
        listADR(ADRESSE(1, '123 Main St', 12345)),
        listPH(PHONE(2, '9876543210'))
    ),
    inventory(ARTICLE(1, 9.99, 0.5, 1),ARTICLE(2, 19.99, 0.5, 1))
);


SELECT * FROM ORDERS;

SELECT o.ID,o.ORDER_DATE,a.TAXE,a.PRICE
FROM ORDERS o, TABLE(o.INV) a;

SELECT ARTICLE(1, 9.99, 0.5, 1).calculateLineTotal() AS line_total FROM DUAL;

DROP TABLE ORDERS;
DROP TYPE inventory;
DROP TYPE ARTICLE;
DROP TYPE CLIENT;
DROP TYPE listPH;
DROP TYPE listADR;
DROP TYPE PHONE;
DROP TYPE ADRESSE;
